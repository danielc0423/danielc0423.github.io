function 1:


select customer.cus_id,orders.order_id,orders.total_price,orders.total_unit,delivary.delivary_date,delivary.delivary_address from ( (customer inner join orders on customer.cus_id = orders.cus_id ) inner join delivary on customer.cus_id = delivary.cus_id  );


function 2:
select cus_id ,balance from customer 
where payment like 'gift card'
and balance >= 100
order by balance desc


function 3(make use of agg function):
select sum(txn_tax) + sum(total_price) as revenue from orders;


function 4 (delivary time needed):
select order_id,estimated_time,datediff(day,order_date,delivary_date) as Day_needed from delivary;


function 5 ( if we know our college buy things here, we can offer a fast delivary)(make use of wildcard):


select cus_id,cus_address,cus_phone from customer
where cus_address  like '[hH]%pace%' and areacode = 852;


function 6: provide discount for frequent buyers
SELECT TOP 5 cus_id, shop_id, COUNT(shop_id) AS purchase_count
FROM (orders INNER JOIN cart ON orders.order_id = cart.order_id) INNER JOIN product ON product.prod_id = cart.prod_id
GROUP BY shop_id, cus_id
ORDER BY purchase_count DESC


function 7:
SELECT product.prod_id,product.prod_name,
SUM(cart.unit) as product_sold, product.quantity - sum(cart.unit) as new_quantity
FROM cart, product
WHERE cart.prod_id=product.prod_id
GROUP BY product.prod_id, product.prod_name, product.quantity
ORDER BY product.prod_id;


function 8 (counting total number of product in each category and their average price):
select category, count(*) as number_of_them, avg(prod_price) as average_price
from product 
group by category


function 9 (trace the huge number of item record):


select order_id, sum(unit) as item_num from cart
group by order_id
having sum(unit) > 10
order by sum(unit) desc;